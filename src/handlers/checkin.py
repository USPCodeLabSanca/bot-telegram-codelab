import telebot
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReactionTypeEmoji, Message, CallbackQuery

from handlers.abstract import msg_handler
       
class handler_DB():
    def __init__(self, bot:TeleBot, databases):
        self.database= databases
        self.bot= bot

    def getDB_a(self, chat_id: int):
        return self.database.extrai_db_a(chat_id)
    
    def is_db_empty(self, check_atual: dict | None, msg: Message):
        if not check_atual:
            self.bot.send_message(msg.chat.id,'N√£o h√° nada no seu check-in semanal no momento :( ')
            return True
        
        else:
            return False
       
class checkin(msg_handler):
    def __init__(self, nossoBOT, **dependecies):
        super().__init__(nossoBOT, **dependecies)
        
    def __call__(self, msg: Message):
        redirect= f'<b>O que voc√™ deseja realizar?</b>\n\n'
        redirect+=f'‚ûï Adicionar um novo item ao meu check-in:\n/checkin_add\n\n'
        redirect+=f'üîé Ver uma pr√©via simples do que j√° est√° no seu check-in:\n/checkin_preview\n\n'
        redirect+=f'‚ú® Formatar o check-in atual:\n/checkin_format\n\n'
        redirect+=f'üöÆ Deletar o check-in atual:\n/checkin_clear\n\n'

        self.BOT.send_message(msg.chat.id, redirect, parse_mode='HTML')

        self.DATABASE.manutencao_db()
        
class add_checkin(msg_handler):
    def __init__(self, nossoBOT, **dependecies):
        super().__init__(nossoBOT, **dependecies)
        self.callbacks()

    def __call__(self, msg: Message):
        """O m√©todo add_checkin adiciona o que o usu√°rio pedir ao seu check-in semanal, de acordo com a categoria
        :Par√¢metro msg: Mensagem do telegram que pediu para adicionar os dados"""

        #Bot√µes e keyboard para cada tipo de coisa que vai no check-in
        btn1_add= InlineKeyboardButton(text="‚úÖ Adicionar tarefa realizada ‚úÖ", callback_data= "add_tar")
        btn2_add= InlineKeyboardButton(text="üöß Adicionar dificuldade/bloqueio üöß", callback_data= "add_des")
        btn3_add= InlineKeyboardButton(text="üí¨ Adicionar Coment√°rio opicional üí¨", callback_data= "add_com")

        inline_keyboard_add= InlineKeyboardMarkup(row_width=1)
        inline_keyboard_add.add(btn1_add, btn2_add, btn3_add)

        self.BOT.send_message(msg.chat.id, 'O que voc√™ quer adicionar ao seu check-in semanal?', reply_markup= inline_keyboard_add)

    def callbacks(self):
        """O m√©todo callbacks cuida das a√ß√µes que ocorrem ap√≥s um usu√°rio usar um bot√£o dos inline keyboards"""

        #Essa √© a callback de adicionar novos items ao check-in, do m√©todo self.add_checkin
        @self.BOT.callback_query_handler(func= lambda call: call.data.startswith('add'))
        def oque_vamos_adicionar(call: CallbackQuery):
            self.BOT.answer_callback_query(call.id)

            mensagens_para_cada_opcao = {
            'add_tar': 'Qual foi a tarefa realizada? \nPara anular, responda "none"',
            'add_des': 'Qual foi a dificuldade encontrada? \nPara anular, responda "none"',
            'add_com': 'Qual comentario a ser adicionado? \nPara anular, responda "none"'
            }

            #Se o bot√£o que o usu√°rio criou est√° entre as op√ß√µes acima, no dicion√°rio mensagens_para_cada opcao:
            #N√≥s enviamos para o m√©todo le_Resposta qual bot√£o foi escolhido
            if call.data in mensagens_para_cada_opcao.keys():
                self.BOT.send_message(call.message.chat.id, mensagens_para_cada_opcao[call.data])
                self.BOT.register_next_step_handler(call.message, self.le_Resposta, call.data)


    def le_Resposta(self, msg:Message, categoria: str):

        resposta= msg.text.lower().strip()

        #Caso de anula√ß√£o da adi√ß√£o
        if (resposta== 'none'):
            return
        
        resposta= resposta.capitalize()
        if (categoria=='add_tar'):
            self.DATABASE.add_db(msg.from_user.id, msg.chat.id, 'tarefas', resposta)
            self.BOT.send_message(msg.chat.id, f'‚úÖ Tarefa adicionada: <i>{resposta}</i>\nDeseja adicionar um novo item? /checkin_add', parse_mode='HTML')

        elif (categoria=='add_des'):
            self.DATABASE.add_db(msg.from_user.id, msg.chat.id, 'desafios', resposta)
            self.BOT.send_message(msg.chat.id, f'üöß Dificuldade adicionada: <i>{resposta}</i>\nDeseja adicionar um novo item? /checkin_add', parse_mode='HTML')

        elif (categoria=='add_com'):
            self.DATABASE.add_db(msg.from_user.id, msg.chat.id, 'comentarios', resposta)
            self.BOT.send_message(msg.chat.id, f'üí¨ Coment√°rio adicionado: <i>{resposta}</i>\nDeseja adicionar um novo item? /checkin_add', parse_mode='HTML')

        else:
            self.BOT.send_message(msg.chat.id, f'Erro ao acrescentar: <i>{resposta}</i>\nDeseja tentar adicionar um novo item? /checkin_add', parse_mode='HTML')

class preview_checkin(msg_handler):
    def __init__(self, nossoBOT, **dependecies):
        super().__init__(nossoBOT, **dependecies)
        self.db_handler= handler_DB(nossoBOT, self.DATABASE)

    def __call__(self, msg: Message):
        """O m√©todo preview_checkin permite que o usu√°rio veja uma pr√©via de como est√° o seu 
        relat√≥rio antes de enviar o formatado
        
        :Par√¢metro msg: Mensagem do telegram que pediu o preview"""

        #Pega os dados na database para ver se tem alguma coisa para apagar
        checkin_atual=self.db_handler.getDB_a(msg.chat.id)


        #Se n√£o h√° nada no checkin_atual, n√£o h√° porque mostrar uma pr√©via
        if self.db_handler.is_db_empty(checkin_atual, msg):
            return
        
        #O preview √© uma string simples com as informa√ß√µes que j√° est√£o no check-in
        preview= f'Tarefas realizadas:\n'
        for t in checkin_atual['tarefas']:
            preview+= f'    -{t}\n'

        preview+= f'\nDesafios encontrados:\n'
        for d in checkin_atual['desafios']:
                preview+= f'    -{d}\n'
        
        preview+= f'\nComent√°rios adicionais:\n'
        for c in checkin_atual['comentarios']:
            preview+= f'    -{c}\n'

        self.BOT.send_message(msg.chat.id, preview)


class format_checkin(msg_handler):
    def __init__(self, nossoBOT, **dependecies):
        super().__init__(nossoBOT, **dependecies)
        self.db_handler= handler_DB(nossoBOT, self.DATABASE)

    def __call__(self, msg: Message):
        #Pega os dados na database para ver se tem alguma coisa para apagar
        checkin_atual=self.db_handler.getDB_a(msg.chat.id)

        #Se n√£o h√° nada no checkin_atual, n√£o h√° porque mostrar uma pr√©via
        if self.db_handler.is_db_empty(checkin_atual, msg):
            return
        
        #Cria a string que vai ser enviada para o usu√°rio/grupo que requisitou
        titulo = (f'<b>Check-in semanal</b>')
        bullet_char = " ‚Ä¢ "
        formated= f'{titulo}\n\n'
        formated+= '‚úÖ Progresso dessa semana:\n'
        for tar in checkin_atual['tarefas']:
            formated+= f'{bullet_char}{tar.capitalize()}\n'

        formated+= '\nüöß Bloqueios / dificuldades:\n'
        for des in checkin_atual['desafios']:
            formated+= f'{bullet_char}{des.capitalize()}\n'

        formated+= '\nüí¨ Coment√°rios adicionais (opcional):\n'
        for com in checkin_atual['comentarios']:
            formated+= f'{bullet_char}{com.capitalize()}\n'

        envio= self.BOT.send_message(msg.chat.id, formated, parse_mode='HTML')

        #Vamos tamb√©m reagir √† mensagem de formata√ß√£o com um emoji da lista abaixo
        from random import randint
        from time import sleep
        emojis=['üòç', 'üî•', '‚ù§', 'üòÅ', 'üíØ', 'ü¶Ñ', 'üéâ', 'ü§©', 'üëç']
        emoji_para_reagir = emojis[randint(0,8)]
        sleep(1.5)
        self.BOT.set_message_reaction(envio.chat.id, envio.id, [ReactionTypeEmoji(emoji_para_reagir)])


class clear_checkin(msg_handler):
    def __init__(self, nossoBOT, **dependecies):
        super().__init__(nossoBOT, **dependecies)
        self.callbacks()

        self.db_handler= handler_DB(nossoBOT, self.DATABASE)
        
    def __call__(self, msg: Message):
        #Pega os dados na database para ver se tem alguma coisa para apagar
        checkin_atual=self.db_handler.getDB_a(msg.chat.id)

        #Se n√£o h√° nada no checkin_atual, n√£o h√° porque mostrar uma pr√©via
        if self.db_handler.is_db_empty(checkin_atual, msg):
            return
        
        #Teclado para perguntar/confirmar se o us√°rio queria mesmo apagar todo o checkin
        btn1_clear= InlineKeyboardButton(text="SIM", callback_data= "clear_sim")
        btn2_clear= InlineKeyboardButton(text="N√ÉO", callback_data= "clear_nao")
        inline_keyboard_clear= InlineKeyboardMarkup(row_width=2)
        inline_keyboard_clear.add(btn1_clear, btn2_clear)

        if msg.chat.type== 'private':
            warning= '<b>WARNING:</b> Tem certeza que voc√™ deseja apagar o seu check-in atual?\n<b>Essa a√ß√£o n√£o pode ser desfeita!</b>'

        else:
            warning= '<b>WARNING:</b> Tem certeza que voc√™ deseja apagar o check-in atual de <u>todo</u> o grupo? <b>Essa a√ß√£o n√£o pode ser desfeita!</b>'

        self.BOT.send_message(msg.chat.id, warning, reply_markup= inline_keyboard_clear, parse_mode='HTML')
    
    def callbacks(self):
        #Essa √© a callback que apaga o check-in atual, caso o usu√°rio confirme, do m√©todo self.clear_checkin
        @self.BOT.callback_query_handler(func= lambda call: call.data.startswith('clear'))
        def temCerteza(call: CallbackQuery):
            if call.data == "clear_sim":
                self.BOT.answer_callback_query(call.id)
                self.BOT.send_message(call.message.chat.id,'Pronto! Check-in semanal esvaziado!')

                self.DATABASE.deleta_db_a(call.message.chat.id)

            elif call.data == 'clear_nao':
                self.BOT.answer_callback_query(call.id)
                self.BOT.send_message(call.message.chat.id,'Ok! Seu check-in n√£o foi esvaziado!')

            else:
                self.BOT.answer_callback_query(call.id)
                self.BOT.send_message(call.message.chat.id,'Erro ao processar o comando /checkin_clear')
