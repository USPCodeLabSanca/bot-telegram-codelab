import telebot
from telebot import formatting
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

class Check_in:
    def __init__(self, nossoBot):
        self.current_checkin= {
            #Em cada uma dessas listas fica o que o usu√°rio quis adicionar em seu check-in semanal
            'tarefas':[],
            'desafios': [],
            'comentarios': []
        }
        self.BOT= nossoBot #Telebot com o token
        self.current_checkin_empty=True #Inicialmente, voc√™ n√£o tem nada no seu check-in

        #m√©todo que cont√©m todos os handlers de comando/ativa as callbacks
        self.main() 

    def preview_checkin(self, msg):
        """O m√©todo preview_checkin permite que o usu√°rio veja uma pr√©via de como est√° o seu check in antes de enviar o formatado """

        #se n√£o h√° nada no check-in, n√£o h√° porque mostrar uma pr√©via
        if self.current_checkin_empty:
            self.BOT.send_message(msg.chat.id,'N√£o h√° nada no seu check-in semanal no momento :( ')
            return

        else:
            #o preview √© uma string simples com as informa√ß√µes que j√° est√£o no check-in
            preview= f'Tarefas realizadas:\n'
            for t in self.current_checkin['tarefas']:
                preview+= f'    -{t}\n'

            preview+= f'\nDesafios encontrados:\n'
            for d in self.current_checkin['desafios']:
                preview+= f'    -{d}\n'
        
            preview+= f'\nComent√°rios adicionais:\n'
            for c in self.current_checkin['comentarios']:
                preview+= f'    -{c}\n'

            self.BOT.send_message(msg.chat.id, preview)

    def clear_checkin(self, msg):
        """O m√©todo clear_checkin remove tudo o que havia sido adicionado antes pelo usu√°rio"""

        #se n√£o h√° nada no check-in, n√£o h√° porque limpar a lista
        if self.current_checkin_empty:
            self.BOT.send_message(msg.chat.id,'N√£o h√° nada no seu check-in semanal no momento :( ')
            return
        
        else:
            #Teclado para perguntar/confirmar se o us√°rio queria mesmo apagar todo o checkin
            btn1_clear= InlineKeyboardButton(text="SIM", callback_data= "clear_sim")
            btn2_clear= InlineKeyboardButton(text="N√ÉO", callback_data= "clear_nao")
            inline_keyboard_clear= InlineKeyboardMarkup(row_width=2)
            inline_keyboard_clear.add(btn1_clear, btn2_clear)

            self.BOT.send_message(msg.chat.id,'WARNING: Tem certeza que voc√™ deseja apagar o seu check-in atual?\nEssa a√ß√£o n√£o pode ser desfeita!', reply_markup= inline_keyboard_clear)

    def format_checkin(self, msg):
        """O m√©todo format_checkin escreve o check-in formatado com emojis da maneira estabelecida pelo boost"""

        if self.current_checkin_empty:
            self.BOT.send_message(msg.chat.id,'N√£o h√° nada no seu check-in semanal no momento :( ')
            return
        
        titulo = formatting.hbold("Check-in semanal")
        bullet_char = " ‚Ä¢ "
        formated= f'{titulo}\n\n'
        formated+= '‚úÖ Progresso dessa semana:\n'
        for tar in self.current_checkin['tarefas']:
            formated+= f'{bullet_char}{tar.capitalize()}\n'

        formated+= '\nüöß Bloqueios / dificuldades:\n'
        for des in self.current_checkin['desafios']:
            formated+= f'{bullet_char}{des.capitalize()}\n'

        formated+= '\nüí¨ Coment√°rios adicionais (opcional):\n'
        for com in self.current_checkin['comentarios']:
            formated+= f'{bullet_char}{com.capitalize()}\n'

        self.BOT.send_message(msg.chat.id, formated, parse_mode='HTML')

    def add_checkin(self, msg):
        """O m√©todo add_checkin adiciona o que o usu√°rio quiser ao seu check-in semanal"""

        #bot√µes e key board para cada tipo de coisa que vai no check-in
        btn1_add= InlineKeyboardButton(text="‚úÖ Adicionar tarefa realizada ‚úÖ", callback_data= "add_tar")
        btn2_add= InlineKeyboardButton(text="üöß Adicionar dificuldade/bloqueio üöß", callback_data= "add_des")
        btn3_add= InlineKeyboardButton(text="üí¨ Adicionar Coment√°rio opicional üí¨", callback_data= "add_com")

        inline_keyboard_add= InlineKeyboardMarkup(row_width=1)
        inline_keyboard_add.add(btn1_add, btn2_add, btn3_add)

        inicial= f'O que voc√™ quer adicionar ao seu check-in semanal?'
        self.BOT.send_message(msg.chat.id, inicial, reply_markup= inline_keyboard_add)

    def le_Resposta(self, msg, categoria):
        """O m√©todo le_resposta √© auxiliar do add_checkin, ele guarda o que o usu√°rio quer adicionar ao seu check-in"""

        resposta= msg.text.lower().strip()
        if (resposta== 'none'):
            return
        
        resposta= resposta.capitalize()
        if (categoria=='add_tar'):
            self.current_checkin['tarefas'].append(resposta)
            self.BOT.send_message(msg.chat.id, f'‚úÖ Tarefa adicionada: {resposta}\nDeseja adicionar um novo item? /checkin_add')

        elif (categoria=='add_des'):
            self.current_checkin['desafios'].append(resposta)
            self.BOT.send_message(msg.chat.id, f'üöß Dificuldade adicionada: {resposta}\nDeseja adicionar um novo item? /checkin_add')

        elif (categoria=='add_com'):
            self.current_checkin['comentarios'].append(resposta)
            self.BOT.send_message(msg.chat.id, f'üí¨ Coment√°rio adicionado: {resposta}\nDeseja adicionar um novo item? /checkin_add')

        self.current_checkin_empty=False

    def callbacks(self):
        """O m√©todo callbacks cuida das a√ß√µes que ocorrem ap√≥s um usu√°rio usar um bot√£o dos inline keyboards"""

        #Essa √© a callback de adicionar novos items ao check-in, do m√©todo self.add_checkin
        @self.BOT.callback_query_handler(func= lambda call: call.data.startswith('add'))
        def oque_vamos_adicionar(call):
            self.BOT.answer_callback_query(call.id)

            mensagens_para_cada_op√ß√£o = {
            'add_tar': 'Qual foi a tarefa realizada? \nPara anular, responda "none"',
            'add_des': 'Qual foi a dificuldade encontrada? \nPara anular, responda "none"',
            'add_com': 'Qual comentario a ser adicionado? \nPara anular, responda "none"'
            }

            #Se o bot√£o que o usu√°rio criou est√° entre as op√ß√µes acima, no dicion√°rio mensagens_para_cada op√ß√£o:
            #N√≥s enviamos para o m√©todo le_Resposta qual foi o bot√£o escolhido
            if call.data in mensagens_para_cada_op√ß√£o.keys():
                self.BOT.send_message(call.message.chat.id, mensagens_para_cada_op√ß√£o[call.data])
                self.BOT.register_next_step_handler(call.message, self.le_Resposta, call.data)


        #Essa √© a callback que apaga o check-in atual, caso o usu√°rio confirme, do m√©todo self.clear_checkin
        @self.BOT.callback_query_handler(func= lambda call: call.data.startswith('clear'))
        def temCerteza(call):
            if call.data == "clear_sim":
                self.BOT.answer_callback_query(call.id)
                self.BOT.send_message(call.message.chat.id,'Pronto! Check-in semanal esvaziado!')

                for categoria in self.current_checkin.values():
                    categoria.clear()

                self.current_checkin_empty=True

            elif call.data == 'clear_nao':
                self.BOT.answer_callback_query(call.id)
                self.BOT.send_message(call.message.chat.id,'Ok! Seu check-in n√£o foi esvaziado!')

    def main(self):
        """O m√©todo main √© o que aciona os message handlers para os m√©todos acima e as callbacks. 
        Tamb√©m mostra um menu de op√ß√µes para o usu√°rio de quais comandos est√£o dispon√≠veis."""

        @self.BOT.message_handler(commands=['checkin']) 
        def checkin(msg: telebot.types.Message):

            #redirect √© a string com o menu de op√ß√µes de check-in
            redirect= f'<b>O que voc√™ deseja realizar?</b>\n\n'
            redirect+=f'‚ûï Adicionar um novo item ao meu check-in:\n /checkin_add\n\n'
            redirect+=f'üîé Ver uma pr√©via simples do que j√° est√° no seu check-in:\n /checkin_preview\n\n'
            redirect+=f'‚ú® Formatar o check-in atual:\n /checkin_format\n\n'
            redirect+=f'üöÆ Deletar o check-in atual:\n /checkin_clear\n\n'

            self.BOT.send_message(msg.chat.id, redirect, parse_mode='HTML')

        self.BOT.message_handler(commands=['checkin_add'])(self.add_checkin)
        self.BOT.message_handler(commands=['checkin_preview'])(self.preview_checkin)
        self.BOT.message_handler(commands=['checkin_format'])(self.format_checkin)
        self.BOT.message_handler(commands=['checkin_clear'])(self.clear_checkin)

        self.callbacks()
